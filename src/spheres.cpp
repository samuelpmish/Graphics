#include "spheres.hpp"

#include <string>
#include <iostream>

#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtx/matrix_operation.hpp>

namespace Graphics {

#if 0
static float instance_vertices[8] = {
	-1.0f, -1.0f,
	 1.0f, -1.0f,
	 1.0f, +1.0f,
	-1.0f, +1.0f,
};

static uint32_t instance_triangles[4] = {1, 2, 0, 3};
#else
static float instance_vertices[122][3] = {{-0.6070619982,0,0.7946544723},{0.8944271910,0,0.4472135955},{0,0,1.000000000},{-0.7236067977,-0.5257311121,0.4472135955},{-0.7236067977,0.5257311121,0.4472135955},{0,0,-1.000000000},{0.2763932023,-0.8506508084,0.4472135955},{0.2763932023,0.8506508084,0.4472135955},{-0.1875924741,-0.5773502692,0.7946544723},{-0.1875924741,0.5773502692,0.7946544723},{0.4911234732,0.3568220898,0.7946544723},{0.4911234732,-0.3568220898,0.7946544723},{0.6070619982,0,-0.7946544723},{0.1875924741,-0.5773502692,-0.7946544723},{0.1875924741,0.5773502692,-0.7946544723},{-0.4911234732,0.3568220898,-0.7946544723},{-0.4911234732,-0.3568220898,-0.7946544723},{0.7946544723,-0.5773502692,0.1875924741},{-0.3035309991,-0.9341723590,0.1875924741},{0.7946544723,0.5773502692,0.1875924741},{-0.3035309991,0.9341723590,0.1875924741},{-0.9822469464,0,0.1875924741},{0.9822469464,0,-0.1875924741},{0.3035309991,-0.9341723590,-0.1875924741},{0.3035309991,0.9341723590,-0.1875924741},{-0.7946544723,-0.5773502692,-0.1875924741},{-0.7946544723,0.5773502692,-0.1875924741},{0.7236067977,-0.5257311121,-0.4472135955},{-0.8944271910,0,-0.4472135955},{0.7236067977,0.5257311121,-0.4472135955},{-0.2763932023,-0.8506508084,-0.4472135955},{-0.2763932023,0.8506508084,-0.4472135955},{-0.01432416010,-0.9420843166,0.3350700804},{0.04687174329,-0.7537426922,0.6554959905},{-0.2628655561,-0.8090169944,0.5257311121},{-0.01432416010,0.9420843166,0.3350700804},{-0.2628655561,0.8090169944,0.5257311121},{0.04687174329,0.7537426922,0.6554959905},{0.01432416010,-0.9420843166,-0.3350700804},{-0.04687174329,-0.7537426922,-0.6554959905},{0.2628655561,-0.8090169944,-0.5257311121},{0.01432416010,0.9420843166,-0.3350700804},{0.2628655561,0.8090169944,-0.5257311121},{-0.04687174329,0.7537426922,-0.6554959905},{-0.2592300067,-0.1883416244,-0.9472735804},{0.09901705165,-0.3047431498,-0.9472735804},{-0.1624598481,-0.5000000000,-0.8506508084},{0,-1.000000000,0},{-0.3061017500,-0.9420843166,-0.1370359771},{0.09901705165,0.3047431498,-0.9472735804},{-0.2592300067,0.1883416244,-0.9472735804},{-0.1624598481,0.5000000000,-0.8506508084},{-0.3061017500,0.9420843166,-0.1370359771},{0,1.000000000,0},{-0.09901705165,-0.3047431498,0.9472735804},{0.1624598481,-0.5000000000,0.8506508084},{0.2592300067,-0.1883416244,0.9472735804},{0.3061017500,-0.9420843166,0.1370359771},{-0.09901705165,0.3047431498,0.9472735804},{0.2592300067,0.1883416244,0.9472735804},{0.1624598481,0.5000000000,0.8506508084},{0.3061017500,0.9420843166,0.1370359771},{0.3204259101,0,-0.9472735804},{0.4253254042,-0.3090169944,-0.8506508084},{0.4253254042,0.3090169944,-0.8506508084},{0.5653317567,-0.7537426922,0.3350700804},{0.5877852523,-0.8090169944,0},{0.5653317567,0.7537426922,0.3350700804},{0.5877852523,0.8090169944,0},{-0.9004018371,-0.2774969782,0.3350700804},{-0.7023677338,-0.2774969782,0.6554959905},{-0.8506508084,0,0.5257311121},{-0.9004018371,0.2774969782,0.3350700804},{-0.7023677338,0.2774969782,0.6554959905},{-0.4809588754,-0.5822401279,0.6554959905},{-0.4253254042,-0.3090169944,0.8506508084},{-0.4253254042,0.3090169944,0.8506508084},{-0.4809588754,0.5822401279,0.6554959905},{-0.5653317567,-0.7537426922,-0.3350700804},{-0.6881909602,-0.5000000000,-0.5257311121},{-0.4051188016,-0.6373411668,-0.6554959905},{-0.5653317567,0.7537426922,-0.3350700804},{-0.4051188016,0.6373411668,-0.6554959905},{-0.6881909602,0.5000000000,-0.5257311121},{-0.3204259101,0,0.9472735804},{0.7023677338,-0.2774969782,-0.6554959905},{0.4809588754,-0.5822401279,-0.6554959905},{0.7023677338,0.2774969782,-0.6554959905},{0.4809588754,0.5822401279,-0.6554959905},{0.6881909602,-0.5000000000,0.5257311121},{0.4051188016,-0.6373411668,0.6554959905},{0.4051188016,0.6373411668,0.6554959905},{0.6881909602,0.5000000000,0.5257311121},{-0.7313360643,0.1883416244,-0.6554959905},{-0.5257311121,0,-0.8506508084},{-0.7313360643,-0.1883416244,-0.6554959905},{0.7313360643,0.1883416244,0.6554959905},{0.5257311121,0,0.8506508084},{0.7313360643,-0.1883416244,0.6554959905},{-0.5877852523,-0.8090169944,0},{-0.5877852523,0.8090169944,0},{-0.8915490193,-0.3047431498,-0.3350700804},{-0.8915490193,0.3047431498,-0.3350700804},{0.9004018371,-0.2774969782,-0.3350700804},{0.8506508084,0,-0.5257311121},{0.9004018371,0.2774969782,-0.3350700804},{0.9510565163,-0.3090169944,0},{0.8013847855,-0.5822401279,-0.1370359771},{0.8013847855,0.5822401279,-0.1370359771},{0.9510565163,0.3090169944,0},{0.9905660710,0,0.1370359771},{0.8915490193,-0.3047431498,0.3350700804},{0.8915490193,0.3047431498,0.3350700804},{-0.5421547788,-0.7705817523,0.3350700804},{-0.5421547788,0.7705817523,0.3350700804},{0.5421547788,-0.7705817523,-0.3350700804},{0.5421547788,0.7705817523,-0.3350700804},{-0.9510565163,-0.3090169944,0},{-0.9905660710,0,-0.1370359771},{-0.9510565163,0.3090169944,0},{-0.8013847855,-0.5822401279,0.1370359771},{-0.8013847855,0.5822401279,0.1370359771}};
static uint32_t instance_triangles[240][3] = {{6, 33, 32}, {32, 33, 34}, {32, 34, 18}, {33, 8, 34}, {20, 36, 35}, {35, 36, 37}, {35, 37, 7}, {36, 9, 37}, {30, 39, 38}, {38, 39, 40}, {38, 40, 23}, {39, 13, 40}, {24, 42, 41}, {41, 42, 43}, {41, 43, 31}, {42, 14, 43}, {5, 45, 44}, {44, 45, 46}, {44, 46, 16}, {45, 13, 46}, {23, 47, 38}, {38, 47, 48}, {38, 48, 30}, {47, 18, 48}, {5, 50, 49}, {49, 50, 51}, {49, 51, 14}, {50, 15, 51}, {20, 53, 52}, {52, 53, 41}, {52, 41, 31}, {53, 24, 41}, {8, 55, 54}, {54, 55, 56}, {54, 56, 2}, {55, 11, 56}, {6, 32, 57}, {57, 32, 47}, {57, 47, 23}, {32, 18, 47}, {2, 59, 58}, {58, 59, 60}, {58, 60, 9}, {59, 10, 60}, {7, 61, 35}, {35, 61, 53}, {35, 53, 20}, {61, 24, 53}, {12, 63, 62}, {62, 63, 45}, {62, 45, 5}, {63, 13, 45}, {5, 49, 62}, {62, 49, 64}, {62, 64, 12}, {49, 14, 64}, {6, 57, 65}, {65, 57, 66}, {65, 66, 17}, {57, 23, 66}, {7, 67, 61}, {61, 67, 68}, {61, 68, 24}, {67, 19, 68}, {3, 70, 69}, {69, 70, 71}, {69, 71, 21}, {70, 0, 71}, {21, 71, 72}, {72, 71, 73}, {72, 73, 4}, {71, 0, 73}, {8, 75, 74}, {74, 75, 70}, {74, 70, 3}, {75, 0, 70}, {0, 76, 73}, {73, 76, 77}, {73, 77, 4}, {76, 9, 77}, {25, 79, 78}, {78, 79, 80}, {78, 80, 30}, {79, 16, 80}, {31, 82, 81}, {81, 82, 83}, {81, 83, 26}, {82, 15, 83}, {2, 84, 54}, {54, 84, 75}, {54, 75, 8}, {84, 0, 75}, {2, 58, 84}, {84, 58, 76}, {84, 76, 0}, {58, 9, 76}, {27, 86, 85}, {85, 86, 63}, {85, 63, 12}, {86, 13, 63}, {12, 64, 87}, {87, 64, 88}, {87, 88, 29}, {64, 14, 88}, {17, 89, 65}, {65, 89, 90}, {65, 90, 6}, {89, 11, 90}, {7, 91, 67}, {67, 91, 92}, {67, 92, 19}, {91, 10, 92}, {15, 94, 93}, {93, 94, 95}, {93, 95, 28}, {94, 16, 95}, {10, 97, 96}, {96, 97, 98}, {96, 98, 1}, {97, 11, 98}, {18, 99, 48}, {48, 99, 78}, {48, 78, 30}, {99, 25, 78}, {26, 100, 81}, {81, 100, 52}, {81, 52, 31}, {100, 20, 52}, {28, 95, 101}, {101, 95, 79}, {101, 79, 25}, {95, 16, 79}, {26, 83, 102}, {102, 83, 93}, {102, 93, 28}, {83, 15, 93}, {27, 85, 103}, {103, 85, 104}, {103, 104, 22}, {85, 12, 104}, {22, 104, 105}, {105, 104, 87}, {105, 87, 29}, {104, 12, 87}, {22, 106, 103}, {103, 106, 107}, {103, 107, 27}, {106, 17, 107}, {29, 108, 105}, {105, 108, 109}, {105, 109, 22}, {108, 19, 109}, {1, 111, 110}, {110, 111, 106}, {110, 106, 22}, {111, 17, 106}, {22, 109, 110}, {110, 109, 112}, {110, 112, 1}, {109, 19, 112}, {18, 34, 113}, {113, 34, 74}, {113, 74, 3}, {34, 8, 74}, {4, 77, 114}, {114, 77, 36}, {114, 36, 20}, {77, 9, 36}, {23, 40, 115}, {115, 40, 86}, {115, 86, 27}, {40, 13, 86}, {29, 88, 116}, {116, 88, 42}, {116, 42, 24}, {88, 14, 42}, {25, 117, 101}, {101, 117, 118}, {101, 118, 28}, {117, 21, 118}, {21, 119, 118}, {118, 119, 102}, {118, 102, 28}, {119, 26, 102}, {3, 120, 113}, {113, 120, 99}, {113, 99, 18}, {120, 25, 99}, {4, 114, 121}, {121, 114, 100}, {121, 100, 26}, {114, 20, 100}, {17, 66, 107}, {107, 66, 115}, {107, 115, 27}, {66, 23, 115}, {24, 68, 116}, {116, 68, 108}, {116, 108, 29}, {68, 19, 108}, {1, 98, 111}, {111, 98, 89}, {111, 89, 17}, {98, 11, 89}, {19, 92, 112}, {112, 92, 96}, {112, 96, 1}, {92, 10, 96}, {2, 56, 59}, {59, 56, 97}, {59, 97, 10}, {56, 11, 97}, {3, 69, 120}, {120, 69, 117}, {120, 117, 25}, {69, 21, 117}, {4, 121, 72}, {72, 121, 119}, {72, 119, 21}, {121, 26, 119}, {5, 44, 50}, {50, 44, 94}, {50, 94, 15}, {44, 16, 94}, {16, 46, 80}, {80, 46, 39}, {80, 39, 30}, {46, 13, 39}, {14, 51, 43}, {43, 51, 82}, {43, 82, 31}, {51, 15, 82}, {6, 90, 33}, {33, 90, 55}, {33, 55, 8}, {90, 11, 55}, {9, 60, 37}, {37, 60, 91}, {37, 91, 7}, {60, 10, 91}};
#endif

const std::string vert_shader(R"vert(
#version 400

in vec3 instance_vertex;

in vec4 sphere;
in vec4 rgba;

out vec3 sphere_center;
out vec4 sphere_color;

uniform mat4 proj;
uniform vec3 up;
uniform vec3 camera_position;

void main() {
  sphere_color = rgba;
  sphere_center = sphere.xyz;
  float sphere_radius = sphere.w;
  gl_Position = proj * vec4(sphere_center + sphere_radius * instance_vertex, 1);
}
)vert");

const std::string frag_shader(R"frag(
#version 400

in vec3 sphere_center;
in vec4 sphere_color;

out vec4 frag_color;

uniform vec4 light;
uniform vec3 camera_position;
uniform mat4 proj;

void main() {

  frag_color = sphere_color;

  //if (light.w != 0) {
  //  vec3 normal = normalize(p - sphere_center);
  //  float ambient = 1.0 - light.w;
  //  float diffuse = clamp(dot(normal,light.xyz), 0.0, 1.0) * light.w;
  //  frag_color *= ambient + diffuse;
  //}

}
)frag");

Spheres::Spheres() : program({
    Shader::fromString(vert_shader, GL_VERTEX_SHADER),
    Shader::fromString(frag_shader, GL_FRAGMENT_SHADER)
  }),
  color{255, 255, 255, 255},
  light(0.721995, 0.618853, 0.309426, 0.0) {

  dirty = true;

  glGenVertexArrays(1, &vao);
  glBindVertexArray(vao);

  glGenBuffers(1, &instance_ebo);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, instance_ebo);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(instance_triangles), instance_triangles, GL_STATIC_DRAW);

  glGenBuffers(1, &instance_vbo);
  glBindBuffer(GL_ARRAY_BUFFER, instance_vbo);
  glBufferData(GL_ARRAY_BUFFER, sizeof(instance_vertices), instance_vertices, GL_STATIC_DRAW);
  program.setAttribute("instance_vertex", 3, sizeof(float) * 3, 0);

  glGenBuffers(1, &sphere_vbo);
  glBindBuffer(GL_ARRAY_BUFFER, sphere_vbo);
  program.setAttribute("sphere", 4, sizeof(glm::vec4), 0);
  glVertexAttribDivisor(program.attribute("sphere"), 1);

  glGenBuffers(1, &color_vbo);
  glBindBuffer(GL_ARRAY_BUFFER, color_vbo);
  program.setAttribute("rgba", 4, sizeof(rgbcolor), 0, GL_TRUE, GL_UNSIGNED_BYTE);
  glVertexAttribDivisor(program.attribute("rgba"), 1);

}

void Spheres::clear() {
  data.clear();
  colors.clear();
  dirty = true;
}

void Spheres::append(const Sphere & sphere) {
  data.push_back(sphere);
  colors.push_back(color);
  dirty = true;
}

void Spheres::append(const std::vector< Sphere > & more_spheres) {
  data.reserve(data.size() + more_spheres.size());
  data.insert(data.end(), more_spheres.begin(), more_spheres.end());  

  colors.insert(colors.end(), more_spheres.size(), color);
  dirty = true;
}

void Spheres::append(const std::vector< Sphere > & more_spheres,
                     const std::vector< rgbcolor > & more_colors) {
  data.reserve(data.size() + more_spheres.size());
  data.insert(data.end(), more_spheres.begin(), more_spheres.end());  

  colors.reserve(colors.size() + more_colors.size());
  colors.insert(colors.end(), more_colors.begin(), more_colors.end());  
  dirty = true;
}

void Spheres::set_light(glm::vec3 direction, float intensity) {
  auto unit_direction = normalize(direction);
  light[0] = unit_direction[0];
  light[1] = unit_direction[1];
  light[2] = unit_direction[2];
  light[3] = glm::clamp(intensity, 0.0f, 1.0f);
}

void Spheres::set_color(rgbcolor c) {
  color = c;
}

void Spheres::draw(const Camera & camera) {

  program.use();

  //program.setUniform("light", light);
  program.setUniform("proj", camera.matrix());

  glBindVertexArray(vao);
  if (dirty) {
    if (colors.size() != data.size()) {
      std::cout << "error: `Sphere` buffer sizes are incompatible" << std::endl;
    }

    glBindBuffer(GL_ARRAY_BUFFER, sphere_vbo);
    glBufferData(GL_ARRAY_BUFFER, sizeof(Sphere) * data.size(), &data[0], GL_STATIC_DRAW);

    glBindBuffer(GL_ARRAY_BUFFER, color_vbo);
    glBufferData(GL_ARRAY_BUFFER, sizeof(rgbcolor) * colors.size(), &colors[0], GL_STATIC_DRAW);
    dirty = false;
  }

  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, instance_ebo);
  glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
  glEnable(GL_CULL_FACE);
  glCullFace(GL_BACK);
  glDrawElementsInstanced(GL_TRIANGLES, sizeof(instance_triangles), GL_UNSIGNED_INT, 0, data.size());

  program.unuse();

}

}